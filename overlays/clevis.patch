diff --git a/nixos/modules/module-list.nix b/nixos/modules/module-list.nix
index 47b262bf4d98..d3ca020ce40f 100644
--- a/nixos/modules/module-list.nix
+++ b/nixos/modules/module-list.nix
@@ -1404,6 +1404,7 @@
   ./system/activation/bootspec.nix
   ./system/activation/top-level.nix
   ./system/boot/binfmt.nix
+  ./system/boot/clevis.nix
   ./system/boot/emergency-mode.nix
   ./system/boot/grow-partition.nix
   ./system/boot/initrd-network.nix
diff --git a/nixos/modules/system/boot/clevis.md b/nixos/modules/system/boot/clevis.md
new file mode 100644
index 000000000000..39505785b4f2
--- /dev/null
+++ b/nixos/modules/system/boot/clevis.md
@@ -0,0 +1,49 @@
+# Clevis {#module-boot-clevis}
+
+[Clevis](https://github.com/latchset/clevis)
+is a framework for automated decryption policy of ressources.
+Clevis allows for secure unattended disk decryption during boot, using decryption policies that must be satisfied for the data to decrypt.
+
+
+## Create a secret {#module-boot-clevis-create-secret}
+
+Secrets have to be created through the clevis command line. 3 types of policies are supported:
+
+1) TPM policies
+
+Secrets are binded against the presence of a TPM2 device, for example:
+```
+echo hi | clevis encrypt tpm2 '{}' > hi.jwe
+```
+2) Tang policies
+
+Secrets are binded against the presence of a Tang server, for example:
+```
+echo hi | clevis encrypt tang '{"url": "http://tang.local"}' > hi.jwe
+```
+
+3) Shamir Secret Sharing
+Secrets are binded against a combination of the two precedent policies, for example:
+```
+echo hi | clevis encrypt sss \
+'{"t": 2, "pins": {"tpm2": {"pcr_ids": "0"}, "tang": {"url": "http://tang.local"}}}' \
+> hi.jwe
+```
+
+For more commplete documentation on how to generate a secret with clevis, see the [clevis documentation](https://github.com/latchset/clevis).
+
+
+## Activate unattended decryption of a ressource at boot {#module-boot-clevis-activate}
+
+In order to activate unattended decryption of a ressource at boot, enable the `clevis` module:
+
+```
+boot.initrd.clevis.enable = true;
+```
+
+Then, specify the device you want to decrypt using a given clevis secret. Clevis will automatically try to decrypt the device at boot and will fallback to interactive unlocking if the decryption policy is not respected.
+```
+boot.initrd.clevis.devices."/dev/nvme0n1p1" = ./nvme0n1p1.jwe;
+```
+
+Only `bcachefs`, `zfs` and `luks` encrypted devices are supported at this time.
diff --git a/nixos/modules/system/boot/clevis.nix b/nixos/modules/system/boot/clevis.nix
new file mode 100644
index 000000000000..29c8dcbfd607
--- /dev/null
+++ b/nixos/modules/system/boot/clevis.nix
@@ -0,0 +1,105 @@
+{ config, lib, pkgs, ... }:
+
+with lib;
+
+let
+  cfg = config.boot.initrd.clevis;
+  supportedFs = [ "zfs" "bcachefs" ];
+in
+{
+  meta.maintainers = with maintainers; [ julienmalka camillemndn ];
+  meta.doc = ./clevis.md;
+
+  options = {
+    boot.initrd.clevis.enable = mkEnableOption (lib.mdDoc "Clevis in initrd");
+
+
+    boot.initrd.clevis.package = mkOption {
+      type = types.package;
+      default = pkgs.clevis;
+      defaultText = "pkgs.clevis";
+      description = lib.mdDoc "Clevis package";
+    };
+
+    boot.initrd.clevis.devices = mkOption {
+      description = "Encrypted devices that need to be unlocked at boot using Clevis";
+      default = { };
+      type = types.attrsOf (types.submodule ({
+        options.secretFile = mkOption {
+          description = lib.mdDoc "Clevis JWE secret file used to decrypt the device at boot";
+          type = types.path;
+        };
+      }));
+    };
+
+    boot.initrd.clevis.useTang = mkOption {
+      description = "Wether the clevis secret used to decrypt the devices are binded to a Tang server";
+      default = false;
+      type = types.bool;
+    };
+
+  };
+
+  config = mkIf cfg.enable {
+
+    # Implementation of clevis unlocking for the supported filesystems are located directly in the respective modules.
+
+
+    assertions = (attrValues (mapAttrs
+      (device: _: {
+        assertion = (any (fs: fs.device == device && (elem fs.fsType supportedFs)) config.system.build.fileSystems) || (hasAttr device config.boot.initrd.luks.devices);
+        message = ''
+          No filesystem or LUKS device with the name ${name} is declared in your configuration ${trace config.fileSystems device}
+        '';
+      })
+      cfg.devices));
+
+
+    warnings =
+      if cfg.useTang && !config.boot.initrd.network.enable && !config.boot.initrd.systemd.network.enable
+      then [ "In order to use a Tang binded secret you must configure networking in initrd" ]
+      else [ ];
+
+    boot.initrd = {
+      extraUtilsCommands = ''
+        copy_bin_and_libs ${pkgs.jose}/bin/jose
+        copy_bin_and_libs ${pkgs.curl}/bin/curl
+        copy_bin_and_libs ${pkgs.bash}/bin/bash
+
+        copy_bin_and_libs ${pkgs.tpm2-tools}/bin/.tpm2-wrapped
+        mv $out/bin/{.tpm2-wrapped,tpm2}
+        cp {${pkgs.tpm2-tss},$out}/lib/libtss2-tcti-device.so.0
+
+        copy_bin_and_libs ${cfg.package}/bin/.clevis-wrapped
+        mv $out/bin/{.clevis-wrapped,clevis}
+
+        for BIN in ${cfg.package}/bin/clevis-decrypt*; do
+          copy_bin_and_libs $BIN
+        done
+
+        for BIN in $out/bin/clevis{,-decrypt{,-null,-tang,-tpm2}}; do
+          sed -i $BIN -e 's,${pkgs.bash},,' -e 's,${pkgs.coreutils},,'
+        done
+
+        sed -i $out/bin/clevis-decrypt-tpm2 -e 's,tpm2_,tpm2 ,'
+      '';
+
+      secrets = lib.mapAttrs' (name: value: nameValuePair "/etc/clevis/${name}.jwe" value.secretFile) cfg.devices;
+
+      systemd = {
+        extraBin.clevis = "${cfg.package}/bin/clevis";
+        extraBin.curl = "${pkgs.curl}/bin/curl";
+
+        storePaths = [
+          cfg.package
+          "${pkgs.jose}/bin/jose"
+          "${pkgs.curl}/bin/curl"
+          "${pkgs.tpm2-tools}/bin/tpm2_createprimary"
+          "${pkgs.tpm2-tools}/bin/tpm2_flushcontext"
+          "${pkgs.tpm2-tools}/bin/tpm2_load"
+          "${pkgs.tpm2-tools}/bin/tpm2_unseal"
+        ];
+      };
+    };
+  };
+}
diff --git a/nixos/modules/system/boot/luksroot.nix b/nixos/modules/system/boot/luksroot.nix
index 06c329e006b8..090e3c3ea8f0 100644
--- a/nixos/modules/system/boot/luksroot.nix
+++ b/nixos/modules/system/boot/luksroot.nix
@@ -4,6 +4,8 @@ with lib;
 
 let
   luks = config.boot.initrd.luks;
+  clevis = config.boot.initrd.clevis;
+  systemd = config.boot.initrd.systemd;
   kernelPackages = config.boot.kernelPackages;
   defaultPrio = (mkOptionDefault {}).priority;
 
@@ -594,7 +596,7 @@ in
       '';
 
       type = with types; attrsOf (submodule (
-        { name, ... }: { options = {
+        { config, name, ... }: { options = {
 
           name = mkOption {
             visible = false;
@@ -894,6 +896,19 @@ in
             '';
           };
         };
+
+        config = mkIf (clevis.enable && (hasAttr name clevis.devices)) {
+          preOpenCommands = mkIf (!systemd.enable) ''
+            mkdir -p /clevis-${name}
+            mount -t ramfs none /clevis-${name}
+            clevis decrypt < /etc/clevis/${name}.jwe > /clevis-${name}/decrypted
+          '';
+          keyFile = "/clevis-${name}/decrypted";
+          fallbackToPassword = !systemd.enable;
+          postOpenCommands = mkIf (!systemd.enable) ''
+            umount /clevis-${name}
+          '';
+        };
       }));
     };
 
@@ -1081,6 +1096,38 @@ in
     boot.initrd.preLVMCommands = mkIf (!config.boot.initrd.systemd.enable) (commonFunctions + preCommands + concatStrings (mapAttrsToList openCommand preLVM) + postCommands);
     boot.initrd.postDeviceCommands = mkIf (!config.boot.initrd.systemd.enable) (commonFunctions + preCommands + concatStrings (mapAttrsToList openCommand postLVM) + postCommands);
 
+    boot.initrd.systemd.services = let devicesWithClevis = filterAttrs (device: _: (hasAttr device clevis.devices)) luks.devices; in
+      mkIf (clevis.enable && systemd.enable) (
+        (mapAttrs'
+          (name: _: nameValuePair "cryptsetup-clevis-${name}" {
+            wantedBy = [ "systemd-cryptsetup@${name}.service" ];
+            before = [
+              "systemd-cryptsetup@${name}.service"
+              "initrd-switch-root.target"
+              "shutdown.target"
+            ];
+            wants = [ "network-online.target" ];
+            after = [
+              "systemd-modules-load.service"
+              "network-online.target"
+            ];
+            script = ''
+              mkdir -p /clevis-${name}
+              mount -t ramfs none /clevis-${name}
+              clevis decrypt < /etc/clevis/${name}.jwe > /clevis-${name}/decrypted
+              chmod 400 /clevis-${name}/decrypted
+            '';
+            conflicts = [ "initrd-switch-root.target" "shutdown.target" ];
+            unitConfig.DefaultDependencies = "no";
+            serviceConfig = {
+              Type = "oneshot";
+              RemainAfterExit = true;
+              ExecStop = "umount /clevis-${name}";
+            };
+          })
+          devicesWithClevis)
+      );
+
     environment.systemPackages = [ pkgs.cryptsetup ];
   };
 }
diff --git a/nixos/modules/tasks/filesystems/bcachefs.nix b/nixos/modules/tasks/filesystems/bcachefs.nix
index 19ef188ce783..4e49d27aed5f 100644
--- a/nixos/modules/tasks/filesystems/bcachefs.nix
+++ b/nixos/modules/tasks/filesystems/bcachefs.nix
@@ -6,7 +6,7 @@ let
 
   bootFs = filterAttrs (n: fs: (fs.fsType == "bcachefs") && (utils.fsNeededForBoot fs)) config.fileSystems;
 
-  mountCommand = pkgs.runCommand "mount.bcachefs" {} ''
+  mountCommand = pkgs.runCommand "mount.bcachefs" { } ''
     mkdir -p $out/bin
     cat > $out/bin/mount.bcachefs <<EOF
     #!/bin/sh
@@ -41,10 +41,17 @@ let
       # also, implement automatic waiting for the constituent devices when that happens
       # bcachefs does not support mounting devices with colons in the path, ergo we don't (see #49671)
       firstDevice = head (splitString ":" fs.device);
+      withClevis = config.boot.initrd.clevis.enable && (hasAttr firstDevice config.boot.initrd.clevis.devices);
     in
-      ''
-        tryUnlock ${name} ${firstDevice}
-      '';
+    if withClevis then ''
+      if clevis decrypt < /etc/clevis/${firstDevice}.jwe | bcachefs unlock ${firstDevice}; then
+        printf "unlocked ${name} using clevis\n"; else
+        printf "falling back to interactive unlocking...\n"
+        tryUnlock ${name} ${firstDevice};
+      fi
+    '' else ''
+      tryUnlock ${name} ${firstDevice}
+    '';
 
 in
 
@@ -61,7 +68,7 @@ in
       boot.kernelPackages = pkgs.linuxPackages_testing_bcachefs;
     }
 
-    (mkIf ((elem "bcachefs" config.boot.initrd.supportedFilesystems) || (bootFs != {})) {
+    (mkIf ((elem "bcachefs" config.boot.initrd.supportedFilesystems) || (bootFs != { })) {
       # chacha20 and poly1305 are required only for decryption attempts
       boot.initrd.availableKernelModules = [ "bcachefs" "sha256" "chacha20" "poly1305" ];
 
diff --git a/nixos/modules/tasks/filesystems/zfs.nix b/nixos/modules/tasks/filesystems/zfs.nix
index 082634ec9d01..b7e4f0ff7ee9 100644
--- a/nixos/modules/tasks/filesystems/zfs.nix
+++ b/nixos/modules/tasks/filesystems/zfs.nix
@@ -16,6 +16,9 @@ let
   cfgTrim = config.services.zfs.trim;
   cfgZED = config.services.zfs.zed;
 
+  clevisDatasets = map (e: e.device) (filter (e: (hasAttr e.device config.boot.initrd.clevis.devices) && e.fsType == "zfs" && (fsNeededForBoot e)) config.system.build.fileSystems);
+
+
   inInitrd = any (fs: fs == "zfs") config.boot.initrd.supportedFilesystems;
   inSystem = any (fs: fs == "zfs") config.boot.supportedFilesystems;
 
@@ -119,12 +122,12 @@ let
       # but don't *require* it, because mounts shouldn't be killed if it's stopped.
       # In the future, hopefully someone will complete this:
       # https://github.com/zfsonlinux/zfs/pull/4943
-      wants = [ "systemd-udev-settle.service" ];
+      wants = [ "systemd-udev-settle.service" ] ++ optional (config.boot.initrd.clevis.useTang) "network-online.target";
       after = [
         "systemd-udev-settle.service"
         "systemd-modules-load.service"
         "systemd-ask-password-console.service"
-      ];
+      ] ++ optional (config.boot.initrd.clevis.useTang) "network-online.target";
       requiredBy = getPoolMounts prefix pool ++ [ "zfs-import.target" ];
       before = getPoolMounts prefix pool ++ [ "zfs-import.target" ];
       unitConfig = {
@@ -153,6 +156,9 @@ let
           poolImported "${pool}" || poolImport "${pool}"  # Try one last time, e.g. to import a degraded pool.
         fi
         if poolImported "${pool}"; then
+          ${optionalString (elem pool (map (e: elemAt (splitString "/" e) 0) clevisDatasets))
+              (concatMapStringsSep "\n" (elem: "clevis decrypt < /etc/clevis/${elem}.jwe | zfs load-key ${elem}") (filter (p: (elemAt (splitString "/" p) 0) == pool) clevisDatasets)) + " || "}
+
           ${optionalString keyLocations.hasKeys ''
             ${keyLocations.command} | while IFS=$'\t' read ds kl ks; do
               {
@@ -616,6 +622,10 @@ in
               fi
               poolImported "${pool}" || poolImport "${pool}"  # Try one last time, e.g. to import a degraded pool.
             fi
+
+            ${optionalString (elem pool (map (e: elemAt (splitString "/" e) 0) clevisDatasets))
+              (concatMapStringsSep "\n" (elem: "clevis decrypt < /etc/clevis/${elem}.jwe | zfs load-key ${elem}") (filter (p: (elemAt (splitString "/" p) 0) == pool) clevisDatasets))}
+
             ${if isBool cfgZfs.requestEncryptionCredentials
               then optionalString cfgZfs.requestEncryptionCredentials ''
                 zfs load-key -a
diff --git a/nixos/tests/all-tests.nix b/nixos/tests/all-tests.nix
index 42d620b512c4..940d4bc8eeb5 100644
--- a/nixos/tests/all-tests.nix
+++ b/nixos/tests/all-tests.nix
@@ -175,6 +175,7 @@ in {
   chrony-ptp = handleTestOn ["aarch64-linux" "x86_64-linux"] ./chrony-ptp.nix {};
   cinnamon = handleTest ./cinnamon.nix {};
   cjdns = handleTest ./cjdns.nix {};
+  clevis = handleTestOn [ "x86_64-linux" ] ./clevis.nix {};
   clickhouse = handleTest ./clickhouse.nix {};
   cloud-init = handleTest ./cloud-init.nix {};
   cloud-init-hostname = handleTest ./cloud-init-hostname.nix {};
diff --git a/nixos/tests/clevis.nix b/nixos/tests/clevis.nix
new file mode 100644
index 000000000000..a2da7c1f114f
--- /dev/null
+++ b/nixos/tests/clevis.nix
@@ -0,0 +1,419 @@
+{ system ? builtins.currentSystem
+, config ? { }
+, pkgs ? import ../.. { inherit system config; }
+}:
+
+with import ../lib/testing-python.nix { inherit system pkgs; };
+with pkgs.lib;
+
+# The test script boots a NixOS VM, installs NixOS on an empty hard
+# disk, and then reboot from the hard disk. It's parameterized with
+# a test script fragment `createRootPartition', which must create
+# partitions and filesystems.
+
+let
+  makeClevisTest = { name, createRootPartition, extraInstallerConfig ? { }, extraConfig ? "", systemdStage1 ? false, fallback ? false, preBootCommands ? "" }: makeTest {
+    name = "clevis-${name}${optionalString systemdStage1 "-systemd"}${optionalString fallback "-fallback"}";
+    meta.maintainers = with maintainers; [ camillemndn julienmalka ];
+    enableOCR = fallback;
+
+    nodes = {
+      # The configuration of the Tang server.
+      tang = _: {
+        services.tang = {
+          enable = true;
+          listenStream = [ "80" ];
+          ipAddressAllow = [ "192.168.1.0/24" ];
+        };
+        networking.firewall.allowedTCPPorts = [ 80 ];
+      };
+
+      # The configuration of the installer.
+      installer = { pkgs, ... }: {
+        imports = [
+          ../modules/profiles/installation-device.nix
+          ../modules/profiles/base.nix
+          ./common/auto-format-root-device.nix
+          extraInstallerConfig
+        ];
+
+        # The installer is going to create the clevis secret.
+        environment.systemPackages = [ pkgs.clevis ];
+
+        boot.initrd = {
+          availableKernelModules = [ "tpm_tis" ];
+          clevis = { enable = true; useTang = true; };
+          network.enable = true;
+          systemd.enable = systemdStage1;
+        };
+
+        nix.settings = {
+          substituters = mkForce [ ];
+          hashed-mirrors = null;
+          connect-timeout = 1;
+        };
+
+        hardware.enableAllFirmware = mkForce false;
+
+        virtualisation = {
+          # In systemdStage1, also automatically format the device backing the
+          # root filesystem.
+          fileSystems."/".autoFormat = systemdStage1;
+
+          # Builds stuff in the VM, needs more juice.
+          diskSize = 8 * 1024;
+          cores = 8;
+          memorySize = 1536;
+
+          # Use a small /dev/vdb as the root disk for the
+          # installer. This ensures the target disk (/dev/vda) is
+          # the same during and after installation.
+          emptyDiskImages = [ 512 ];
+          rootDevice = "/dev/vdb";
+          bootLoaderDevice = "/dev/vda";
+          qemu.diskInterface = "virtio";
+          qemu.options = [
+            "-chardev socket,id=chrtpm,path=/tmp/swtpm-sock"
+            "-tpmdev emulator,id=tpm0,chardev=chrtpm"
+            "-device tpm-tis,tpmdev=tpm0"
+          ];
+        };
+
+        # The test cannot access the network, so any packages we
+        # need must be included in the VM.
+        system.extraDependencies = with pkgs;
+          let
+            python = python3Minimal.override { self = python; includeSiteCustomize = true; };
+            zfsSupport = any (x: x == "zfs") (extraInstallerConfig.boot.supportedFilesystems or [ ]);
+          in
+          [
+            bintools
+            brotli
+            brotli.dev
+            brotli.lib
+            curl
+            desktop-file-utils
+            docbook5
+            docbook_xsl_ns
+            (grub2.override { inherit zfsSupport; })
+            (grub2_efi.override { inherit zfsSupport; })
+            kbd.dev
+            klibc
+            kmod.dev
+            libarchive.dev
+            libxml2.bin
+            libxslt.bin
+            nixos-artwork.wallpapers.simple-dark-gray-bottom
+            ntp
+            perlPackages.ListCompare
+            perlPackages.XMLLibXML
+            python3Minimal
+            (python.withPackages (p: [ p.mistune ]))
+            shared-mime-info
+            sudo
+            texinfo
+            unionfs-fuse
+            xorg.lndir
+          ];
+      };
+    };
+
+    testScript = testScriptFun { inherit createRootPartition extraConfig systemdStage1 fallback preBootCommands; };
+  };
+
+  # The configuration to install to the machine that will use Clevis.
+  makeConfig = { extraConfig, systemdStage1 }:
+    pkgs.writeText "configuration.nix" ''
+      { config, lib, pkgs, ... }:
+
+      {
+        imports = [
+          ./hardware-configuration.nix
+          <nixpkgs/nixos/modules/testing/test-instrumentation.nix>
+        ];
+
+        networking.hostName = "installed";
+
+        boot.loader.grub = {
+          extraConfig = "serial; terminal_output serial";
+          device = "/dev/vda";
+          fsIdentifier = "uuid";
+          configurationLimit = 100;
+        };
+
+
+        boot.kernelParams = [ "console=tty0" "ip=192.168.1.1:::255.255.255.0::eth1:none" ];
+
+        boot.initrd = {
+          availableKernelModules = [ "tpm_tis" ];
+          clevis = { enable = true; useTang = true; };
+          ${optionalString (!systemdStage1) "network.enable = true;"}
+          ${optionalString systemdStage1 ''
+          systemd.enable = true;
+          systemd.network.enable = true;
+          ''}
+        };
+
+        # To ensure that we can rebuild the grub configuration on the nixos-rebuild
+        system.extraDependencies = with pkgs; [ stdenvNoCC ];
+        documentation.enable = false;
+        hardware.enableAllFirmware = lib.mkForce false;
+        networking.interfaces."eth1".useDHCP = false;
+        ${replaceStrings [ "\n" ] [ "\n  " ] extraConfig}
+      }
+    '';
+
+  testScriptFun = { createRootPartition, extraConfig, systemdStage1, fallback, preBootCommands }:
+    let
+      createQemuMachine = ''
+        import os
+
+        # Set the QEMU flags to create the machine where we install NixOS
+        def assemble_qemu_flags():
+            flags = "-cpu max"
+            ${if (system == "x86_64-linux" || system == "i686-linux") then ''
+              flags += " -m 1024"
+            '' else ''
+              flags += " -m 768 -enable-kvm -machine virt,gic-version=host"
+            ''}
+            flags += " -chardev socket,id=chrtpm,path=/tmp/swtpm-sock -tpmdev emulator,id=tpm0,chardev=chrtpm -device tpm-tis,tpmdev=tpm0"
+            flags += " -device virtio-net-pci,netdev=vlan1,mac=52:54:00:12:11:02 -netdev vde,id=vlan1,sock=\"$QEMU_VDE_SOCKET_1\""
+            return flags
+
+
+        qemu_flags = {"qemuFlags": assemble_qemu_flags()}
+
+        image_dir = installer.state_dir
+        disk_image = os.path.join(image_dir, "installer.qcow2")
+
+        hd_flags = {
+            "hdaInterface": "virtio",
+            "hda": disk_image,
+        }
+
+        default_flags = {**hd_flags, **qemu_flags}
+
+        def create_machine_named(name):
+            return create_machine({**default_flags, "name": name})
+      '';
+
+      tpmEmulator = ''
+        import subprocess
+
+        # From systemd-initrd-luks-tpm2.nix
+        class Tpm:
+            def __init__(self):
+                self.start()
+
+            def start(self):
+                self.proc = subprocess.Popen(["${pkgs.swtpm}/bin/swtpm",
+                    "socket",
+                    "--tpmstate", "dir=/tmp/swtpm",
+                    "--ctrl", "type=unixio,path=/tmp/swtpm-sock",
+                    "--tpm2"
+                    ])
+
+                # Check whether starting swtpm failed
+                try:
+                    exit_code = self.proc.wait(timeout=0.2)
+                    if exit_code is not None and exit_code != 0:
+                        raise Exception("failed to start swtpm")
+                except subprocess.TimeoutExpired:
+                    pass
+
+            """Check whether the swtpm process exited due to an error"""
+            def check(self):
+                exit_code = self.proc.poll()
+                if exit_code is not None and exit_code != 0:
+                    raise Exception("swtpm process died")
+      '';
+    in
+
+    ''
+      ${createQemuMachine}
+
+      ${tpmEmulator}
+
+      # Create TPM and check it
+      os.mkdir("/tmp/swtpm")
+      tpm = Tpm()
+      tpm.check()
+
+      # Start the Tang server and the installer
+      start_all()
+      tang.wait_for_unit("multi-user.target")
+      tang.wait_for_unit("network-online.target")
+      installer.wait_for_unit("multi-user.target")
+      installer.wait_for_unit("network-online.target")
+
+      with subtest("Assert readiness of login prompt"):
+          installer.succeed("echo hello")
+
+      with subtest("Wait for hard disks to appear in /dev"):
+          installer.succeed("udevadm settle")
+
+      installer.succeed(
+          "flock /dev/vda parted --script /dev/vda -- mklabel msdos"
+          + " mkpart primary ext2 1M 100MB"
+          + " mkpart primary linux-swap 100M 1024M"
+          + " mkpart primary 1024M -1s",
+          "udevadm settle",
+          "mkswap /dev/vda2 -L swap",
+          "swapon -L swap",
+          ${createRootPartition}
+          "mkfs.ext3 -L boot /dev/vda1",
+          "mkdir -p /mnt/boot",
+          "mount LABEL=boot /mnt/boot",
+          "udevadm settle"
+      )
+
+      with subtest("Create the NixOS configuration"):
+          installer.succeed("nixos-generate-config --root /mnt")
+          installer.succeed("cat /mnt/etc/nixos/hardware-configuration.nix >&2")
+          installer.copy_from_host(
+              "${makeConfig { inherit extraConfig systemdStage1; }}",
+              "/mnt/etc/nixos/configuration.nix"
+          )
+
+      with subtest("Create the Clevis secret with Tang"):
+          installer.wait_for_unit("network-online.target")
+          installer.succeed('echo -n password | clevis encrypt sss \'{"t": 2, "pins": {"tpm2": {}, "tang": {"url": "http://192.168.1.2"}}}\' -y > /mnt/etc/nixos/clevis-secret.jwe')
+
+      with subtest("Perform the installation"):
+          installer.succeed("nixos-install --root /mnt --no-root-passwd --no-channel-copy >&2")
+
+      with subtest("Shutdown system after installation"):
+          installer.succeed("umount -R /mnt")
+          installer.succeed("sync")
+          installer.shutdown()
+
+      ${optionalString fallback ''
+        with subtest("Shutdown Tang to check fallback to interactive prompt"):
+            tang.shutdown()
+      ''}
+
+      # Now see if we can boot the installation.
+      tpm = Tpm()
+      tpm.check()
+      clevis = create_machine_named("clevis")
+
+      ${preBootCommands}
+
+      with subtest("Assert that /boot get mounted"):
+          clevis.wait_for_unit("local-fs.target")
+          clevis.succeed("test -e /boot/grub")
+
+      with subtest("Check whether /root has correct permissions"):
+          assert "700" in clevis.succeed("stat -c '%a' /root")
+
+      with subtest("Check that the store is in good shape"):
+          clevis.succeed("nix-store --verify --check-contents >&2")
+
+      clevis.shutdown()
+    '';
+
+  # Disable zfs so we can support latest kernel if needed.
+  no-zfs-module = { nixpkgs.overlays = [ (_: super: { zfs = super.zfs.overrideAttrs (_: { meta.platforms = [ ]; }); }) ]; };
+
+  bcachefs = { systemdStage1 ? false, fallback ? false }: makeClevisTest {
+    name = "bcachefs";
+    inherit systemdStage1 fallback;
+    extraInstallerConfig = {
+      imports = [ no-zfs-module ];
+      boot.supportedFilesystems = [ "bcachefs" ];
+      environment.systemPackages = with pkgs; [ keyutils ];
+    };
+    createRootPartition = ''
+      "keyctl link @u @s",
+      "echo -n password | mkfs.bcachefs -L root --encrypted /dev/vda3",
+      "echo -n password | bcachefs unlock /dev/vda3",
+      "echo -n password | mount -t bcachefs /dev/vda3 /mnt",
+    '';
+    extraConfig = ''
+      boot.initrd.clevis.devices."/dev/vda3".secretFile = ./clevis-secret.jwe;
+
+      # We override what nixos-generate-config has generated because we do
+      # not know the UUID in advance.
+      fileSystems."/" = lib.mkForce { device = "/dev/vda3"; fsType = "bcachefs"; };
+    '';
+    preBootCommands = optionalString fallback ''
+      clevis.start()
+      clevis.wait_for_text("enter passphrase for")
+      clevis.send_chars("password\n")
+    '';
+  };
+
+  luks = { systemdStage1 ? false, fallback ? false }: makeClevisTest {
+    name = "luks";
+    inherit systemdStage1 fallback;
+    createRootPartition = ''
+      "modprobe dm_mod dm_crypt",
+      "echo -n password | cryptsetup luksFormat -q /dev/vda3 -",
+      "echo -n password | cryptsetup luksOpen --key-file - /dev/vda3 cryptroot",
+      "mkfs.ext3 -L nixos /dev/mapper/cryptroot",
+      "mount LABEL=nixos /mnt",
+    '';
+    extraConfig = ''
+      boot.initrd.clevis.devices."cryptroot".secretFile = ./clevis-secret.jwe;
+    '';
+    preBootCommands = optionalString fallback ''
+      clevis.start()
+      ${if systemdStage1 then ''
+      clevis.wait_for_text("Please enter")
+      '' else ''
+      clevis.wait_for_text("Passphrase for")
+      ''}
+      clevis.send_chars("password\n")
+    '';
+  };
+
+  zfs = { systemdStage1 ? false, fallback ? false }: makeClevisTest {
+    name = "zfs";
+    inherit systemdStage1 fallback;
+    extraInstallerConfig = {
+      boot.supportedFilesystems = [ "zfs" ];
+    };
+    createRootPartition = ''
+      "zpool create -O mountpoint=legacy rpool /dev/vda3",
+      "echo -n password | zfs create"
+      + " -o encryption=aes-256-gcm -o keyformat=passphrase rpool/root",
+      "mount -t zfs rpool/root /mnt",
+    '';
+    extraConfig = ''
+      boot.initrd.clevis.devices."rpool/root".secretFile = ./clevis-secret.jwe;
+      boot.zfs.requestEncryptionCredentials = true;
+
+
+      # Using by-uuid overrides the default of by-id, and is unique
+      # to the qemu disks, as they don't produce by-id paths for
+      # some reason.
+      boot.zfs.devNodes = "/dev/disk/by-uuid/";
+      networking.hostId = "00000000";
+    '';
+    preBootCommands = optionalString fallback ''
+      clevis.start()
+      ${if systemdStage1 then ''
+      clevis.wait_for_text("Enter key for rpool/root")
+      '' else ''
+      clevis.wait_for_text("Key load error")
+      ''}
+      clevis.send_chars("password\n")
+    '';
+  };
+in
+
+{
+  bcachefs-scripted = bcachefs { fallback = false; };
+  bcachefs-scripted-fallback = bcachefs { fallback = true; };
+
+  # bcachefs doesn't have a systemd stage 1 implementation yet. Follow https://github.com/NixOS/nixpkgs/pull/249556
+  luks-scripted = luks { fallback = false; };
+  luks-scripted-fallback = luks { fallback = true; };
+  luks-systemd = luks { systemdStage1 = true; fallback = false; };
+  luks-systemd-fallback = luks { systemdStage1 = true; fallback = true; };
+
+  zfs-scripted = zfs { fallback = false; };
+  zfs-scripted-fallback = zfs { fallback = true; };
+  zfs-systemd = zfs { systemdStage1 = true; fallback = false; };
+  zfs-systemd-fallback = zfs { systemdStage1 = true; fallback = true; };
+}
diff --git a/pkgs/tools/security/clevis/default.nix b/pkgs/tools/security/clevis/default.nix
index 0498f0599052..538a54b11060 100644
--- a/pkgs/tools/security/clevis/default.nix
+++ b/pkgs/tools/security/clevis/default.nix
@@ -16,6 +16,7 @@
 , ninja
 , pkg-config
 , tpm2-tools
+, nixosTests
 }:
 
 stdenv.mkDerivation rec {
@@ -29,6 +30,8 @@ stdenv.mkDerivation rec {
     hash = "sha256-3J3ti/jRiv+p3eVvJD7u0ko28rPd8Gte0mCJaVaqyOs=";
   };
 
+  patches = [ ./tang-timeout.patch ];
+
   postPatch = ''
     for f in $(find src/ -type f); do
       grep -q "/bin/cat" "$f" && substituteInPlace "$f" \
@@ -65,6 +68,8 @@ stdenv.mkDerivation rec {
     "man"
   ];
 
+  passthru.tests = nixosTests.clevis;
+
   meta = with lib; {
     description = "Automated Encryption Framework";
     homepage = "https://github.com/latchset/clevis";
diff --git a/pkgs/tools/security/clevis/tang-timeout.patch b/pkgs/tools/security/clevis/tang-timeout.patch
new file mode 100644
index 000000000000..454541d5e77c
--- /dev/null
+++ b/pkgs/tools/security/clevis/tang-timeout.patch
@@ -0,0 +1,13 @@
+diff --git a/src/pins/tang/clevis-decrypt-tang b/src/pins/tang/clevis-decrypt-tang
+index 72393b4..40b660f 100755
+--- a/src/pins/tang/clevis-decrypt-tang
++++ b/src/pins/tang/clevis-decrypt-tang
+@@ -101,7 +101,7 @@ xfr="$(jose jwk exc -i '{"alg":"ECMR"}' -l- -r- <<< "$clt$eph")"
+ 
+ rec_url="$url/rec/$kid"
+ ct="Content-Type: application/jwk+json"
+-if ! rep="$(curl -sfg -X POST -H "$ct" --data-binary @- "$rec_url" <<< "$xfr")"; then
++if ! rep="$(curl --connect-timeout 10 -sfg -X POST -H "$ct" --data-binary @- "$rec_url" <<< "$xfr")"; then
+     echo "Error communicating with server $url" >&2
+     exit 1
+ fi
